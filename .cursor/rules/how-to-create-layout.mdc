---
description:
globs:
alwaysApply: false
---

how to create a beautiful layout that works and easy to edit
the first thing is to use flex box for most of the things lets say that we are building some sort of a dashboard application we first start with in which direction the ui flows if the user interface is has like sidebar and the whole content besides it I mean the main content with the header at the top with things like breadcrums and user profiles when clicked opens some sort popover or dropdown settings of setting and below it with another body of the main content. in this case the containers user flow or direction is horizontal regardless of the two children inside of it therefore we use flex with the horizontal direction and the side bar has some sort of flex basis width and the main content area with the header fills the remaining width if it was some sort of a landing page the container would be vertical therefore we use flex direction for column the sidebar with the minimum height of screen if there was a header it has some sort of flex basis height and the remaining space the child fills it

we use this method not for just bigger things but also for more smaller things we first Identify the direction in which the user flow goes and use dynamic properties to give the width or height (we only use flex-basis in this case) and dynamically fill the remaining space like flex-grow and basis. we should also think of the responsiveness when building ui that is why we give as much as little fixed space as possible we use very fixed state occasionally (if not rarely) so that our ui takes shape

you might also be wondering that what about the spacing between children first of we need to discuss about the spacing between parent and children we never use margins  (there is one place that we use margins to avoid unnecessary nesting of divs we will get back to it) we use padding to give the a space between children and the parent and we try as much as possible to give use gaps and justify for spacing  between items we should rarely use gaps unless it is bunch of list with equal spacing and there is an extra space left and that we need to refill it using dynamic contents which we want exact same space weather the new item is added or not. we avoid using padding for space between children and the parent if it is not like touching the edges of the content and we use align items for it if the parent container is a little bigger or it has a flex basis set up. otherwise we don't bother we with to it to reduce complexity. if there are like four children and one children for some reason should be at the end of the parent container we just use m-auto depending on the direction it could be mx-auto or my-auto with a gap. prefer gaps for the space between children instead of padding

the main point of this rule is to follow the way the ui would go regardless of the size of the container or the importance of the container and use the appropriate flex direction which points in the direction of the ui flow

in the above example we talked about the sidebar our sidebar is the flex-col and the children inside of it could be stacked i.e we are going to be having two children the first one is sidebar header some sort of a logo and hold some    project changing dropdown is flex row and the second one is the navigation which takes the remaining space of the sidebar and it could be flex-col by itself could have footer would be mt-auto to just be at the bottom of what ever the remaining space of the container if there are two or more other elements with fixed gap spacing otherwise it would be space-between the sidebar header could have two more children like the logo and the company name and finnally the dropdown but in this case but we know that the logo and the company name should be side by side which they should be wrapped as one child and spaced with gap hence the sidebar would be having only two children, it is totally normal to use wrapping if it makes sense instead of using m-auto all the time infact that is what I prefer it allows me to setup colors and corners if they are grouped together easily instead of removing the margin and  wrapping them up which is another extra work and remember to use max-w-md for mobile versions except the outer most parent container and also prefer gaps over padding for the spaces inside of the children if they are being used unnecessarily padding should be used with the parents spacing to give some breathing space

use min and max widths for widths inorder to remove any responsive constraints

all of this is for normal flow of the ui interface but does not affect the things that are not possible with flex like absolute and relative positions but the children inside of it follow the rules

when creating user interfaces remember to use the above rule as a guide and also remove the unnecessarily nested dives if you fine one along the way